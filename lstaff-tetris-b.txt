Tetris - Part B
TCSS 305: Programming Practicum, Autumn 2016

Name: Logan Stafford
UWNetID: lstaff
Subversion Revision Number: 82

Assignment Overview:
This assignment is designed to encompass all of the concepts we've covered this quarter by creating a working Tetris game complete with graphics - using Swing, Timners and OOP concepts - together with the Observer design pattern to create a multi-layered tetris game with keyboard input.

Technical Impression:
I'm honestly really proud of this program. It was definitley one of the more challenging programs I've made this quarter, and I think that has a lot to do with drawing on panels and getting accustomed to the limits of different types of graphical components in Swing. Once I got a handle on drawing the board and next piece preview, I realized that although I had split up my GUI code amongst several classes, my main GUI class was almost 1000 lines long, so I had to fix that. After looking and seeing that most of that space was taken up by the menu Bar, I created a seperate "Tetris Menu Bar" JMenuBar class that served to split up a lot of the code. Sometimes the bigger hurdles don't involve actually creating the code, but making working code more efficient, and I spent a lot of time fixing my preexisting code to work with a separate class, since so much of the functionality of the program itself was tied to the menu bar. Those issues were the ones I spent the most time on, and apart from that, I'm proud of the end result. I think this will be my 'pet' program I will keep and modify in the future.

Resources I used during my coding:
- Office hours (thank the lord)
- The Java API in general (see above)
- "How to Make Dialogs" Tutorial from Oracle (http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html)
- "How to Use BoxLayout" Tutorial from Oracle (https://docs.oracle.com/javase/tutorial/uiswing/layout/box.html)
- "How to Write a Key Listener" Tutorial from Oracle (https://docs.oracle.com/javase/tutorial/uiswing/events/keylistener.html)
- "Playing Back Audio" Tutorial from Oracle (https://docs.oracle.com/javase/tutorial/sound/playing.html)
- "Using JAR Files: The Basics" Tutorial from Oracle (https://docs.oracle.com/javase/tutorial/deployment/jar/basicsindex.html)
- The Observer Pattern Wikipedia article (https://en.wikipedia.org/wiki/Observer_pattern)

Credit for images and sound:
Program Icon: http://www.freeiconspng.com/
Set Difficulty Menu Icon: https://www.shopify.com/
Sound Toggle Icon: http://www.freeiconspng.com/
Grid Toggle Icon: http://www.dataknet.com/
Change Grid Size Icon: https://www.iconfinder.com/
Window Background: http://www.pixelstalk.net/
Panel Image: http://www.icons.iconarchive.com/
Background Music: Andy Williams - It's The Most Wonderful Time of the Year (1963)
Line Cleared Sound: https://www.freesound.org/people/SFXsource.com/sounds/110315/
Game Over Sound: https://www.freesound.org/people/noirenex/sounds/159408/
Game Paused Sound: https://www.freesound.org/people/Reitanna/sounds/241170/

Changes to the starter code:
I made two changes:

1. I removed the 'final' modifier of the Board class's myWidth and myHeight integer fields. The changes are commented.

2. I added a method to the Board class called setSize(int theWidth, int theHeight). This method receives two integer values (width and height), and sets the values of the fields myWidth and myHeight to those values. The method is commented.

I was struggling with implementing the changing grid size feature, and although I know thats why the overloaded constructor exists, I was running out of time and made the choice to add this method to quickly solve that issue.

Extra Credit:
1. I added background music and sound effects to the program, found in the 'Options' menu. The sound effects play when a line is cleared, the game is paused, or a "Game Over" has happened. The music is off by default. The music can be enabled or disabled via a CheckBoxMenuItem found, again, in the 'Options' menu. (Sound effects and/or background music)

2. I added the ability for the user to select the difficulty level, also found in the 'Options' menu. The user can choose between "Reindeer Mode" (Easy), "Santa Mode" (Medium), and "Scrooge Mode" (Hard). The difficulty selection basically just sets the default speed of the timer to a preset speed - 500ms for Easy,300 ms for Medium, and 100ms for Hard. The difficulty is set to "Reindeer Mode" (Easy) by default. (Ability for the user to select a specific difficulty level)

3. I added a small option in the 'Options' menu for the user to enable/disable the grid to be drawn on the GamePanel via a CheckBoxMenuItem. The grid is enabled by default. (Ability for user to customize aspects of the GUI)

4. I made my Tetris game Christmas-themed. The background is a fun image found online, various icons throughout the program are Christmas-themed, the color palette is mainly red and green, and the music/sound effects are Christmas-themed as well. (Visual enhancements to the GUI)

Unresolved problems in my submission:
none

Questions:
none

